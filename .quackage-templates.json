{
    "pictunittest": {
        "Hash": "pictunittest",
        "Name": "Pictunittest",
        "Description": "A template set for pictunittest ...",
        "Files": [
            {
                "Hash": "testPictQUACKAGEPROJECTNAMECAPQUACKAGESCOPEtestjs",
                "Path": "test/Pict_QUACKAGEPROJECTNAMECAP_QUACKAGESCOPE_test.js",
                "Content": "/*\n\tUnit tests for {~Data:Record.Scope~} in {~Data:Record.Quackage.AppData.Package.name~} from Quackage Boilerplate\n*/\n\n// This is used to grab the source file from the package.json\nconst _Package = require(`../package.json`);\n// Get the \"main\" view from the package.json\n// If you want to test a specific subview, you can delete the above line and change the require below to the specific file.\nconst libPictView = require(`../${_Package.main}`);\n\n// Mocha, chai and the Expect verb\nconst Chai = require(\"chai\");\nconst Expect = Chai.expect;\n\n// This extends node to have the browser environment globals like window and document.\nconst libBrowserEnv = require('browser-env')\nlibBrowserEnv();\n\nconst libPict = require('pict');\n\nconst _MockPictConfiguration = (\n{\n\tProduct: 'MockPict-ViewTest',\n\tProductVersion: _Package.version\n});\n\n// Any view-specific configuration goes here.\n// If there is no default_configuration object exported with your view, use an empty JSON object\nconst _MockPictViewConfiguration = (typeof(libPictView.default_configuration) === 'undefined') ? {} : libPictView.default_configuration;\n\nsuite\n(\n\t'{~Data:Record.Quackage.AppData.Package.name~} Pict View Suite',\n\tfunction()\n\t{\n\t\tsetup\n\t\t(\n\t\t\tfunction()\n\t\t\t{\n\t\t\t}\n\t\t);\n\n\t\tsuite\n\t\t(\n\t\t\t'Low Level',\n\t\t\tfunction()\n\t\t\t{\n\t\t\t\ttest\n\t\t\t\t(\n\t\t\t\t\t'View Construction',\n\t\t\t\t\tfunction(fDone)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar testPict = new libPict(_MockPictConfiguration);\n\t\t\t\t\t\tlet testView = testPict.addView('TestView', _MockPictViewConfiguration,  libPictView);\n\t\t\t\t\t\tExpect(testView).to.be.an('object');\n\t\t\t\t\t\tExpect(testPict.views.TestView).to.be.an('object');\n\t\t\t\t\t\tExpect(testView.UUID).to.equal(testPict.views.TestView.UUID);\n\t\t\t\t\t\treturn fDone();\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t\ttest\n\t\t\t\t(\n\t\t\t\t\t'View Initialization',\n\t\t\t\t\tfunction(fDone)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar testPict = new libPict(_MockPictConfiguration);\n\t\t\t\t\t\tlet testView = testPict.addView('TestView', _MockPictViewConfiguration,  libPictView);\n\t\t\t\t\t\ttestView.initialize();\n\t\t\t\t\t\tExpect(testView).to.be.an('object');\n\t\t\t\t\t\tExpect(testPict.views.TestView).to.be.an('object');\n\t\t\t\t\t\tExpect(testView.UUID).to.equal(testPict.views.TestView.UUID);\n\t\t\t\t\t\treturn fDone();\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t\ttest\n\t\t\t\t(\n\t\t\t\t\t'View Initialization (async)',\n\t\t\t\t\tfunction(fDone)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar testPict = new libPict(_MockPictConfiguration);\n\t\t\t\t\t\tlet testView = testPict.addView('TestView', _MockPictViewConfiguration,  libPictView);\n\t\t\t\t\t\ttestView.initializeAsync(\n\t\t\t\t\t\t\t(fCallback) =>\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tExpect(testView).to.be.an('object');\n\t\t\t\t\t\t\t\tExpect(testPict.views.TestView).to.be.an('object');\n\t\t\t\t\t\t\t\tExpect(testView.UUID).to.equal(testPict.views.TestView.UUID);\n\t\t\t\t\t\t\t\treturn fDone();\n\t\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t}\n\t\t);\n\t}\n);"
            }
        ]
    },
    "pictviewproject": {
        "Hash": "pictviewproject",
        "Name": "Pictviewproject",
        "Description": "A template set for pictviewproject ...",
        "Files": [
            {
                "Hash": "gitignore",
                "Path": ".gitignore",
                "Content": "# Quackage manager\n.browserslistrc-BACKUP\n.gulpfile-quackage-config.json\n.gulpfile-quackage.js\n.package.json.quackage.bak\n\n# Test coverage\n.nyc_output\n\n# Mac\n.DS_Store\n\n# Logs\nlogs\n*.log\nnpm-debug.log*\nyarn-debug.log*\nyarn-error.log*\nlerna-debug.log*\n.pnpm-debug.log*\n\n# Diagnostic reports (https://nodejs.org/api/report.html)\nreport.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json\n\n# Runtime data\npids\n*.pid\n*.seed\n*.pid.lock\n\n# Directory for instrumented libs generated by jscoverage/JSCover\nlib-cov\n\n# Coverage directory used by tools like istanbul\ncoverage\n*.lcov\n\n# nyc test coverage\n.nyc_output\n\n# Grunt intermediate storage (https://gruntjs.com/creating-plugins#storing-task-files)\n.grunt\n\n# Bower dependency directory (https://bower.io/)\nbower_components\n\n# node-waf configuration\n.lock-wscript\n\n# Compiled binary addons (https://nodejs.org/api/addons.html)\nbuild/Release\n\n# Dependency directories\nnode_modules/\njspm_packages/\n\n# Snowpack dependency directory (https://snowpack.dev/)\nweb_modules/\n\n# TypeScript cache\n*.tsbuildinfo\n\n# Optional npm cache directory\n.npm\n\n# Optional eslint cache\n.eslintcache\n\n# Optional stylelint cache\n.stylelintcache\n\n# Microbundle cache\n.rpt2_cache/\n.rts2_cache_cjs/\n.rts2_cache_es/\n.rts2_cache_umd/\n\n# Optional REPL history\n.node_repl_history\n\n# Output of 'npm pack'\n*.tgz\n\n# Yarn Integrity file\n.yarn-integrity\n\n# dotenv environment variable files\n.env\n.env.development.local\n.env.test.local\n.env.production.local\n.env.local\n\n# parcel-bundler cache (https://parceljs.org/)\n.cache\n.parcel-cache\n\n# Next.js build output\n.next\nout\n\n# Nuxt.js build / generate output\n.nuxt\ndist\n\n# Gatsby files\n.cache/\n# Comment in the public line in if your project uses Gatsby and not Next.js\n# https://nextjs.org/blog/next-9-1#public-directory-support\n# public\n\n# vuepress build output\n.vuepress/dist\n\n# vuepress v2.x temp and cache directory\n.temp\n.cache\n\n# Docusaurus cache and generated files\n.docusaurus\n\n# Serverless directories\n.serverless/\n\n# FuseBox cache\n.fusebox/\n\n# DynamoDB Local files\n.dynamodb/\n\n# TernJS port file\n.tern-port\n\n# Stores VSCode versions used for testing VSCode extensions\n.vscode-test\n\n# yarn v2\n.yarn/cache\n.yarn/unplugged\n.yarn/build-state.yml\n.yarn/install-state.gz\n.pnp.*\n"
            },
            {
                "Hash": "LICENSE",
                "Path": "LICENSE",
                "Content": "MIT License\n\nCopyright (c) 2023 Steven Velozo\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
            },
            {
                "Hash": "READMEmd",
                "Path": "README.md",
                "Content": "# Pict View: {~PascalCaseIdentifier:AppData.Package.name~}\n\nThis is a subclassed Pict View, {~PascalCaseIdentifier:AppData.Package.name~}.\n\nIt does stuff.\n\n# Usage\n\n```js\nconst libPict = require('pict');\n\nlet tmpView = libPict.addView({Options:\"Set here\"}, \"{~PascalCaseIdentifier:AppData.Package.name~}-Hash\", require({~Data:AppData.Package.name~}));\n\ntmpView.render();\n```"
            },
            {
                "Hash": "sourcePictViewQUACKAGEPROJECTNAMECAPjs",
                "Path": "source/Pict-View-QUACKAGEPROJECTNAMECAP.js",
                "Content": "const libPictView = require('pict-view');\n\nclass {~PascalCaseIdentifier:Record.Quackage.AppData.Package.name~} extends libPictView\n{\n\tconstructor(pFable, pOptions, pServiceHash)\n\t{\n\t\tsuper(pFable, pOptions, pServiceHash);\n\t}\n}\n\nmodule.exports = {~PascalCaseIdentifier:Record.Quackage.AppData.Package.name~};\n\n\n/**************************************\n *      Default View Configuration     *\n **************************************/\nmodule.exports.default_configuration =\n{\n\tViewIdentifier: '{~PascalCaseIdentifier:Record.Quackage.AppData.Package.name~}',\n\n\tDefaultRenderable: '{~PascalCaseIdentifier:Record.Quackage.AppData.Package.name~}',\n\tDefaultDestinationAddress: '#{~PascalCaseIdentifier:Record.Quackage.AppData.Package.name~}_Container',\n\tDefaultTemplateRecordAddress: false,\n\n\t// If this is set to true, when the App initializes this will.\n\t// While the App initializes, initialize will be called.\n\tAutoInitialize: true,\n\tAutoInitializeOrdinal: 0,\n\n\t// If this is set to true, when the App autorenders (on load) this will.\n\t// After the App initializes, render will be called.\n\tAutoRender: true,\n\tAutoRenderOrdinal: 0,\n\n\tAutoSolveWithApp: true,\n\tAutoSolveOrdinal: 0,\n\n\tCSS: false,\n\tCSSPriority: 500,\n\n\tTemplates:\n\t[\n\t\t{\n\t\t\tHash: '{~PascalCaseIdentifier:Record.Quackage.AppData.Package.name~}-Template',\n\t\t\tTemplate: /*html*/`\n<!-- {~PascalCaseIdentifier:Record.Quackage.AppData.Package.name~} pict view template: [{~PascalCaseIdentifier:Record.Quackage.AppData.Package.name~}-Template] -->\n<!-- {~PascalCaseIdentifier:Record.Quackage.AppData.Package.name~} end view template:  [{~PascalCaseIdentifier:Record.Quackage.AppData.Package.name~}-Template] -->\n`,\n\t\t},\n\t],\n\n\tRenderables:\n\t[\n\t\t{\n\t\t\tRenderableHash: '{~PascalCaseIdentifier:Record.Quackage.AppData.Package.name~}',\n\t\t\tTemplateHash: '{~PascalCaseIdentifier:Record.Quackage.AppData.Package.name~}-Template',\n\t\t\tDestinationAddress: '#{~PascalCaseIdentifier:Record.Quackage.AppData.Package.name~}_Container',\n\t\t\tRenderMethod: 'replace'\n\t\t},\n\t],\n\n\tManifests: {}\n};\n"
            },
            {
                "Hash": "testPictViewQUACKAGEPROJECTNAMECAPtestsjs",
                "Path": "test/Pict-View-QUACKAGEPROJECTNAMECAP_tests.js",
                "Content": "/*\n\tUnit tests for {~Data:Record.Scope~} in {~Data:Record.Quackage.AppData.Package.name~} from Quackage Boilerplate\n*/\n\n// This is used to grab the source file from the package.json\nconst _Package = require(`../package.json`);\n// Get the \"main\" view from the package.json\n// If you want to test a specific subview, you can delete the above line and change the require below to the specific file.\nconst libPictView = require(`../${_Package.main}`);\n\n// Mocha, chai and the Expect verb\nconst Chai = require(\"chai\");\nconst Expect = Chai.expect;\n\n// This extends node to have the browser environment globals like window and document.\n//const libBrowserEnv = require('browser-env')\n//libBrowserEnv();\n\nconst libPict = require('pict');\n\nconst _MockPictConfiguration = (\n{\n\tProduct: 'MockPict-ViewTest',\n\tProductVersion: _Package.version\n});\n\n// Any view-specific configuration goes here.\n// If there is no default_configuration object exported with your view, use an empty JSON object\nconst _MockPictViewConfiguration = (typeof(libPictView.default_configuration) === 'undefined') ? {} : libPictView.default_configuration;\n\nsuite\n(\n\t'{~Data:Record.Quackage.AppData.Package.name~} Pict View Suite',\n\tfunction()\n\t{\n\t\tsetup\n\t\t(\n\t\t\tfunction()\n\t\t\t{\n\t\t\t}\n\t\t);\n\n\t\tsuite\n\t\t(\n\t\t\t'Low Level',\n\t\t\tfunction()\n\t\t\t{\n\t\t\t\ttest\n\t\t\t\t(\n\t\t\t\t\t'View Construction',\n\t\t\t\t\tfunction(fDone)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar testPict = new libPict(_MockPictConfiguration);\n\t\t\t\t\t\tlet testView = testPict.addView('TestView', _MockPictViewConfiguration,  libPictView);\n\t\t\t\t\t\tExpect(testView).to.be.an('object');\n\t\t\t\t\t\tExpect(testPict.views.TestView).to.be.an('object');\n\t\t\t\t\t\tExpect(testView.UUID).to.equal(testPict.views.TestView.UUID);\n\t\t\t\t\t\treturn fDone();\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t\ttest\n\t\t\t\t(\n\t\t\t\t\t'View Initialization',\n\t\t\t\t\tfunction(fDone)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar testPict = new libPict(_MockPictConfiguration);\n\t\t\t\t\t\tlet testView = testPict.addView('TestView', _MockPictViewConfiguration,  libPictView);\n\t\t\t\t\t\ttestView.initialize();\n\t\t\t\t\t\tExpect(testView).to.be.an('object');\n\t\t\t\t\t\tExpect(testPict.views.TestView).to.be.an('object');\n\t\t\t\t\t\tExpect(testView.UUID).to.equal(testPict.views.TestView.UUID);\n\t\t\t\t\t\treturn fDone();\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t\ttest\n\t\t\t\t(\n\t\t\t\t\t'View Initialization (async)',\n\t\t\t\t\tfunction(fDone)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar testPict = new libPict(_MockPictConfiguration);\n\t\t\t\t\t\tlet testView = testPict.addView('TestView', _MockPictViewConfiguration,  libPictView);\n\t\t\t\t\t\ttestView.initializeAsync(\n\t\t\t\t\t\t\t(fCallback) =>\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tExpect(testView).to.be.an('object');\n\t\t\t\t\t\t\t\tExpect(testPict.views.TestView).to.be.an('object');\n\t\t\t\t\t\t\t\tExpect(testView.UUID).to.equal(testPict.views.TestView.UUID);\n\t\t\t\t\t\t\t\treturn fDone();\n\t\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t}\n\t\t);\n\t}\n);"
            }
        ]
    },
    "unittest": {
        "Hash": "unittest",
        "Name": "Unittest",
        "Description": "A template set for unittest ...",
        "Files": [
            {
                "Hash": "testQUACKAGEPROJECTNAMECAPBasictestjs",
                "Path": "test/QUACKAGEPROJECTNAMECAP-Basic_test.js",
                "Content": "/*\n\tUnit tests for {~PascalCaseIdentifier:AppData.Package.name~} v.{~D:AppData.Package.version~} {~Data:Record.Scope~}\n*/\n\nconst Chai = require('chai');\nconst Expect = Chai.expect;\n\nconst lib{~PascalCaseIdentifier:AppData.Package.name~} = require(`../{~Data:AppData.Package.main~}`);\n\nsuite\n(\n\t'{~PascalCaseIdentifier:AppData.Package.name~} {~Data:Record.Scope~} Suite',\n\t() =>\n\t{\n\t\tsetup(() => { });\n\n\t\tsuite\n\t\t\t(\n\t\t\t\t'Basic {~D:_Package.name~}.v.{~D:_Package.version~} {~D:Record.Scope~} Tests',\n\t\t\t\t() =>\n\t\t\t\t{\n\t\t\t\t\ttest(\n\t\t\t\t\t\t\t'Object Instantiation',\n\t\t\t\t\t\t\t(fDone) =>\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tlet _{~PascalCaseIdentifier:AppData.Package.name~} = new lib{~PascalCaseIdentifier:AppData.Package.name~}();\n\t\t\t\t\t\t\t\tExpect(_{~PascalCaseIdentifier:AppData.Package.name~}).to.be.an('object');\n\t\t\t\t\t\t\t\treturn fDone();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t);\n\t}\n);"
            }
        ]
    },
    "luxury": {
        "Hash": "luxury",
        "Name": "Luxury",
        "Description": "A template set for luxury ...",
        "Files": [
            {
                "Hash": "configcodeserverconfigyaml",
                "Path": ".config/code-server/config.yaml",
                "Content": "bind-addr: 127.0.0.1:8080\nauth: password\npassword: luxury\ncert: false\n"
            },
            {
                "Hash": "vscodelaunchjson",
                "Path": ".vscode/launch.json",
                "Content": "{\n    // Use IntelliSense to learn about possible attributes.\n    // Hover to view descriptions of existing attributes.\n    // For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387\n    \"version\": \"0.2.0\",\n    \"configurations\": [\n        {\n            \"name\": \"Launch Debug Harness\",\n            \"type\": \"pwa-node\",\n            \"request\": \"launch\",\n            \"outputCapture\": \"std\",\n            \"skipFiles\": [\n                \"<node_internals>/**\"\n            ],\n            \"program\": \"${workspaceFolder}/debug/Harness.js\",\n            \"presentation\": {\n                \"hidden\": false,\n                \"group\": \"\",\n                \"order\": 1\n            }\n        },\n        {\n            \"name\": \"Mocha Tests\",\n            \"args\": [\n                \"-u\",\n                \"tdd\",\n                \"--timeout\",\n                \"999999\",\n                \"--colors\",\n                \"${workspaceFolder}/test\"\n            ],\n            \"internalConsoleOptions\": \"openOnSessionStart\",\n            \"program\": \"${workspaceFolder}/node_modules/mocha/bin/_mocha\",\n            \"request\": \"launch\",\n            \"skipFiles\": [\n                \"<node_internals>/**\"\n            ],\n            \"type\": \"pwa-node\",\n            \"presentation\": {\n                \"hidden\": false,\n                \"group\": \"\",\n                \"order\": 2\n            }\n        }\n    ]\n}"
            },
            {
                "Hash": "DockerfileLUXURYCode",
                "Path": "Dockerfile_LUXURYCode",
                "Content": "# Use the codercom/code-server image\nFROM codercom/code-server:latest\nLABEL org.opencontainers.image.authors=\"steven@velozo.com\"\n\nVOLUME /home/coder/.config\nVOLUME /home/coder/.vscode\n\nRUN echo \"...installing debian dependencies...\"\nRUN sudo apt update\nRUN sudo apt install vim curl tmux -y\n\nRUN echo \"Building development image...\"\n\nRUN echo \"...installing vscode extensions...\"\n\n# Mocha unit testing in the sidebar\nRUN code-server --install-extension hbenl.vscode-mocha-test-adapter\nRUN code-server --install-extension hbenl.test-adapter-converter\nRUN code-server --install-extension hbenl.vscode-test-explorer\n\n# Magic indentation rainbow\nRUN code-server --install-extension oderwat.indent-rainbow\nRUN code-server --install-extension dbaeumer.vscode-eslint\n\n# Contextual git\nRUN code-server --install-extension eamodio.gitlens\n\n# Other extensions (uncomment them to have them automagic, or run this from a terminal to install in the container):\n\n# Microsoft's AI code completion\n# RUN code-server --install-extension  VisualStudioExptTeam.vscodeintellicode\n\n# Live server -- make sure to open up the port on the docker image\n# RUN code-server --install-extension ritwickdey.LiveServer\n\n# Quick link to required modules' documentation\n# RUN code-server --install-extension bengreenier.vscode-node-readme\n\n# Switch up fonts\n# RUN code-server --install-extension evan-buss.font-switcher\n\n# Icons\n# RUN code-server --install-extension vscode-icons-team.vscode-icons\n# RUN code-server --install-extension PKief.material-icon-theme\n\n# Hover over CSS colors to see them previewed\n# RUN code-server --install-extension bierner.color-info\n\n# An easy on the eyes color theme\n# RUN code-server --install-extension daylerees.rainglow\n\nRUN echo \"...mapping library specific volumes...\"\n\n# Volume mapping for code\nVOLUME /home/coder/{~D:AppData.Package.name~}\n\nSHELL [\"/bin/bash\", \"-c\"]\nUSER coder\n\nRUN echo \"...installing node version manager...\"\n# Because there is a .bashrc chicken/egg problem, we will create one here to simulate logging in.  This is not great.\nRUN touch ~/.bashrc && chmod +x ~/.bashrc\nRUN curl https://raw.githubusercontent.com/creationix/nvm/master/install.sh | bash\n\nRUN echo \"...installing node version 14 as the default...\"\nRUN . ~/.nvm/nvm.sh && source ~/.bashrc && nvm install 14\nRUN . ~/.nvm/nvm.sh && source ~/.bashrc && nvm alias default 14\n\nWORKDIR /home/coder/{~D:AppData.Package.name~}\n"
            }
        ]
    },
    "luxurymysql": {
        "Hash": "luxurymysql",
        "Name": "Luxurymysql",
        "Description": "A template set for luxurymysql ...",
        "Files": [
            {
                "Hash": "configMySQLLadenEntrysh",
                "Path": ".config/MySQL-Laden-Entry.sh",
                "Content": "#!/bin/bash\n\ntrap 'kill -TERM $PID' TERM INT\n\n/usr/bin/entrypoint.sh --bind-addr \"0.0.0.0:8080\" . &\n\nPID=$!\n\nsleep 2\n\nsudo service mariadb restart\n\nwait $PID\ntrap - TERM INT\nwait $PID\nEXIT_STATUS=$?\necho \"Service exited with status ${EXIT_STATUS}\""
            },
            {
                "Hash": "configMySQLSecuritysql",
                "Path": ".config/MySQL-Security.sql",
                "Content": "FLUSH PRIVILEGES;\n\nALTER USER 'root'@'localhost' IDENTIFIED BY '123456789';\n\nGRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY '123456789' WITH GRANT OPTION;\n"
            },
            {
                "Hash": "configcodeserverconfigyaml",
                "Path": ".config/code-server/config.yaml",
                "Content": "bind-addr: 127.0.0.1:8080\nauth: password\npassword: luxury\ncert: false\n"
            },
            {
                "Hash": "vscodelaunchjson",
                "Path": ".vscode/launch.json",
                "Content": "{\n    // Use IntelliSense to learn about possible attributes.\n    // Hover to view descriptions of existing attributes.\n    // For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387\n    \"version\": \"0.2.0\",\n    \"configurations\": [\n        {\n            \"name\": \"Launch Debug Harness\",\n            \"type\": \"pwa-node\",\n            \"request\": \"launch\",\n            \"outputCapture\": \"std\",\n            \"skipFiles\": [\n                \"<node_internals>/**\"\n            ],\n            \"program\": \"${workspaceFolder}/debug/Harness.js\",\n            \"presentation\": {\n                \"hidden\": false,\n                \"group\": \"\",\n                \"order\": 1\n            }\n        },\n        {\n            \"name\": \"Mocha Tests\",\n            \"args\": [\n                \"-u\",\n                \"tdd\",\n                \"--timeout\",\n                \"999999\",\n                \"--colors\",\n                \"${workspaceFolder}/test\"\n            ],\n            \"internalConsoleOptions\": \"openOnSessionStart\",\n            \"program\": \"${workspaceFolder}/node_modules/mocha/bin/_mocha\",\n            \"request\": \"launch\",\n            \"skipFiles\": [\n                \"<node_internals>/**\"\n            ],\n            \"type\": \"pwa-node\",\n            \"presentation\": {\n                \"hidden\": false,\n                \"group\": \"\",\n                \"order\": 2\n            }\n        }\n    ]\n}"
            },
            {
                "Hash": "DockerfileLUXURYCode",
                "Path": "Dockerfile_LUXURYCode",
                "Content": "# Use the codercom/code-server image\nFROM codercom/code-server:latest\nMAINTAINER steven velozo\n\nVOLUME /home/coder/.config\nVOLUME /home/coder/.vscode\n\nRUN echo \"...installing debian dependencies...\"\nRUN sudo apt update\nRUN sudo apt install vim curl tmux -y\n\nRUN echo \"Building development image...\"\n\nRUN echo \"...installing vscode extensions...\"\n\n# Mocha unit testing in the sidebar\nRUN code-server --install-extension hbenl.vscode-mocha-test-adapter\nRUN code-server --install-extension hbenl.test-adapter-converter\nRUN code-server --install-extension hbenl.vscode-test-explorer\n\n# Magic indentation rainbow\nRUN code-server --install-extension oderwat.indent-rainbow\nRUN code-server --install-extension dbaeumer.vscode-eslint\n\n# Contextual git\nRUN code-server --install-extension eamodio.gitlens\n\n# SQL Tools\nRUN code-server --install-extension mtxr.sqltools\nRUN code-server --install-extension mtxr.sqltools-driver-mysql\n\n# >> Other extensions (uncomment them to have them automagic, or run this from a terminal to install in the container):\n\n# Microsoft's AI code completion\n# RUN code-server --install-extension  VisualStudioExptTeam.vscodeintellicode\n\n# Live server -- make sure to open up the port on the docker image\n# RUN code-server --install-extension ritwickdey.LiveServer\n\n# Quick link to required modules' documentation\n# RUN code-server --install-extension bengreenier.vscode-node-readme\n\n# Switch up fonts\n# RUN code-server --install-extension evan-buss.font-switcher\n\n# Icons\n# RUN code-server --install-extension vscode-icons-team.vscode-icons\n# RUN code-server --install-extension PKief.material-icon-theme\n\n# Hover over CSS colors to see them previewed\n# RUN code-server --install-extension bierner.color-info\n\n# An easy on the eyes color theme\n# RUN code-server --install-extension daylerees.rainglow\n\nRUN echo \"...configuring mariadb (mysql) server...\"\nRUN sudo apt install default-mysql-server default-mysql-client -y\nRUN sudo sed -i \"s|bind-address|#bind-address|g\" /etc/mysql/mariadb.conf.d/50-server.cnf\n# This grants root everything in our test db instance\nCOPY ./.config/MySQL-Security.sql /home/coder/MySQL-Configure-Security.sql\n# This is the docker entrypoint that launches the SQL server in addition to the vscode stuff\nCOPY ./.config/MySQL-Laden-Entry.sh /usr/bin/MySQL-Laden-Entry.sh\nRUN sudo chmod +x /usr/bin/MySQL-Laden-Entry.sh\n# Launch the mysql server and execute the security grant with the client\nRUN ( sudo mysqld_safe --skip-grant-tables --skip-networking & ) && sleep 5 &&  mysql -u root < /home/coder/MySQL-Configure-Security.sql\n\n# Create the initial database ... you can change these luxurydb names to whatever you want\nRUN sudo service mariadb restart && sleep 5 && mysql -u root -p\"123456789\" -e \"CREATE DATABASE luxurydb;\"\n\n# You can follow these patterns below if you want to create a database and populate it with data.\n#\n# >> Put your table creation script here or change this, to import a database.\n# RUN echo \"...creating and populating database tables...\"\n# COPY ./.config/MySQL-Create-Database.mysql.sql /home/coder/MySQL-Create-Databases.sql\n# RUN sudo service mariadb restart && sleep 5 && mysql -u root -p\"123456789\" luxurydb < /home/coder/MySQL-Create-Databases.sql\n#\n# >> If you have a data population script, put it here.\n# COPY ./.config/MySQL-Populate-Database.mysql.sql /home/coder/MySQL-Populate-Database.sql\n# RUN sudo service mariadb restart && sleep 5 && mysql -u root -p\"123456789\" luxurydb < /home/coder/MySQL-Populate-Database.sql\n# RUN echo \"...database creation and population complmete.\"\n\nRUN echo \"...mapping library specific volumes...\"\n\n# Volume mapping for code\nVOLUME /home/coder/{~D:AppData.Package.name~}\n\nSHELL [\"/bin/bash\", \"-c\"]\nUSER coder\n\nRUN echo \"...installing node version manager...\"\n# Because there is a .bashrc chicken/egg problem, we will create one here to simulate logging in.  This is not great.\nRUN touch ~/.bashrc && chmod +x ~/.bashrc\nRUN curl https://raw.githubusercontent.com/creationix/nvm/master/install.sh | bash\n\nRUN echo \"...installing node version 14 as the default...\"\nRUN . ~/.nvm/nvm.sh && source ~/.bashrc && nvm install 14\nRUN . ~/.nvm/nvm.sh && source ~/.bashrc && nvm alias default 14\n\nWORKDIR /home/coder/{~D:AppData.Package.name~}\n\nENTRYPOINT [\"/usr/bin/MySQL-Laden-Entry.sh\"]"
            }
        ]
    },
    "nodegitignore": {
        "Hash": "nodegitignore",
        "Name": "Nodegitignore",
        "Description": "A template set for nodegitignore ...",
        "Files": [
            {
                "Hash": "gitignore",
                "Path": ".gitignore",
                "Content": "# Test Environment\ndebug/testenv\n\n# Quackage takes care of these for me!\n.babelrc\n.browserslistrc\n.browserslistrc-BACKUP\n.gulpfile-quackage.js\n.gulpfile-quackage-config.json\n\n# I just dislike this one.\n.DS_Store\n\n# Logs\nlogs\n*.log\nnpm-debug.log*\nyarn-debug.log*\nyarn-error.log*\nlerna-debug.log*\n.pnpm-debug.log*\n\n# Diagnostic reports (https://nodejs.org/api/report.html)\nreport.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json\n\n# Runtime data\npids\n*.pid\n*.seed\n*.pid.lock\n\n# Directory for instrumented libs generated by jscoverage/JSCover\nlib-cov\n\n# Coverage directory used by tools like istanbul\ncoverage\n*.lcov\n\n# nyc test coverage\n.nyc_output\n\n# Grunt intermediate storage (https://gruntjs.com/creating-plugins#storing-task-files)\n.grunt\n\n# Bower dependency directory (https://bower.io/)\nbower_components\n\n# node-waf configuration\n.lock-wscript\n\n# Compiled binary addons (https://nodejs.org/api/addons.html)\nbuild/Release\n\n# Dependency directories\nnode_modules/\njspm_packages/\n\n# Snowpack dependency directory (https://snowpack.dev/)\nweb_modules/\n\n# TypeScript cache\n*.tsbuildinfo\n\n# Optional npm cache directory\n.npm\n\n# Optional eslint cache\n.eslintcache\n\n# Optional stylelint cache\n.stylelintcache\n\n# Microbundle cache\n.rpt2_cache/\n.rts2_cache_cjs/\n.rts2_cache_es/\n.rts2_cache_umd/\n\n# Optional REPL history\n.node_repl_history\n\n# Output of 'npm pack'\n*.tgz\n\n# Yarn Integrity file\n.yarn-integrity\n\n# dotenv environment variable files\n.env\n.env.development.local\n.env.test.local\n.env.production.local\n.env.local\n\n# parcel-bundler cache (https://parceljs.org/)\n.cache\n.parcel-cache\n\n# Next.js build output\n.next\nout\n\n# Nuxt.js build / generate output\n.nuxt\ndist\n\n# Gatsby files\n.cache/\n# Comment in the public line in if your project uses Gatsby and not Next.js\n# https://nextjs.org/blog/next-9-1#public-directory-support\n# public\n\n# vuepress build output\n.vuepress/dist\n\n# vuepress v2.x temp and cache directory\n.temp\n.cache\n\n# Docusaurus cache and generated files\n.docusaurus\n\n# Serverless directories\n.serverless/\n\n# FuseBox cache\n.fusebox/\n\n# DynamoDB Local files\n.dynamodb/\n\n# TernJS port file\n.tern-port\n\n# Stores VSCode versions used for testing VSCode extensions\n.vscode-test\n\n# yarn v2\n.yarn/cache\n.yarn/unplugged\n.yarn/build-state.yml\n.yarn/install-state.gz\n.pnp.*\n"
            }
        ]
    },
    "pictviewunittest": {
        "Hash": "pictviewunittest",
        "Name": "Pictviewunittest",
        "Description": "A template set for pictviewunittest ...",
        "Files": [
            {
                "Hash": "testPictQUACKAGEPROJECTNAMECAPQUACKAGESCOPEtestjs",
                "Path": "test/Pict_QUACKAGEPROJECTNAMECAP_QUACKAGESCOPE_test.js",
                "Content": "/*\n\tUnit tests for {~Data:Record.Scope~} in {~Data:Record.Quackage.AppData.Package.name~} from Quackage Boilerplate\n*/\n\n// This is used to grab the source file from the package.json\nconst _Package = require(`../package.json`);\n// Get the \"main\" view from the package.json\n// If you want to test a specific subview, you can delete the above line and change the require below to the specific file.\nconst libPictView = require(`../${_Package.main}`);\n\n// Mocha, chai and the Expect verb\nconst Chai = require(\"chai\");\nconst Expect = Chai.expect;\n\n// This extends node to have the browser environment globals like window and document.\n//const libBrowserEnv = require('browser-env')\n//libBrowserEnv();\n\nconst libPict = require('pict');\n\nconst _MockPictConfiguration = (\n{\n\tProduct: 'MockPict-ViewTest',\n\tProductVersion: _Package.version\n});\n\n// Any view-specific configuration goes here.\n// If there is no default_configuration object exported with your view, use an empty JSON object\nconst _MockPictViewConfiguration = (typeof(libPictView.default_configuration) === 'undefined') ? {} : libPictView.default_configuration;\n\nsuite\n(\n\t'{~Data:Record.Quackage.AppData.Package.name~} Pict View Suite',\n\tfunction()\n\t{\n\t\tsetup\n\t\t(\n\t\t\tfunction()\n\t\t\t{\n\t\t\t}\n\t\t);\n\n\t\tsuite\n\t\t(\n\t\t\t'Low Level',\n\t\t\tfunction()\n\t\t\t{\n\t\t\t\ttest\n\t\t\t\t(\n\t\t\t\t\t'View Construction',\n\t\t\t\t\tfunction(fDone)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar testPict = new libPict(_MockPictConfiguration);\n\t\t\t\t\t\tlet testView = testPict.addView('TestView', _MockPictViewConfiguration,  libPictView);\n\t\t\t\t\t\tExpect(testView).to.be.an('object');\n\t\t\t\t\t\tExpect(testPict.views.TestView).to.be.an('object');\n\t\t\t\t\t\tExpect(testView.UUID).to.equal(testPict.views.TestView.UUID);\n\t\t\t\t\t\treturn fDone();\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t\ttest\n\t\t\t\t(\n\t\t\t\t\t'View Initialization',\n\t\t\t\t\tfunction(fDone)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar testPict = new libPict(_MockPictConfiguration);\n\t\t\t\t\t\tlet testView = testPict.addView('TestView', _MockPictViewConfiguration,  libPictView);\n\t\t\t\t\t\ttestView.initialize();\n\t\t\t\t\t\tExpect(testView).to.be.an('object');\n\t\t\t\t\t\tExpect(testPict.views.TestView).to.be.an('object');\n\t\t\t\t\t\tExpect(testView.UUID).to.equal(testPict.views.TestView.UUID);\n\t\t\t\t\t\treturn fDone();\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t\ttest\n\t\t\t\t(\n\t\t\t\t\t'View Initialization (async)',\n\t\t\t\t\tfunction(fDone)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar testPict = new libPict(_MockPictConfiguration);\n\t\t\t\t\t\tlet testView = testPict.addView('TestView', _MockPictViewConfiguration,  libPictView);\n\t\t\t\t\t\ttestView.initializeAsync(\n\t\t\t\t\t\t\t(fCallback) =>\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tExpect(testView).to.be.an('object');\n\t\t\t\t\t\t\t\tExpect(testPict.views.TestView).to.be.an('object');\n\t\t\t\t\t\t\t\tExpect(testView.UUID).to.equal(testPict.views.TestView.UUID);\n\t\t\t\t\t\t\t\treturn fDone();\n\t\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t}\n\t\t);\n\t}\n);"
            }
        ]
    },
    "pictview": {
        "Hash": "pictview",
        "Name": "Pictview",
        "Description": "A template set for pictview ...",
        "Files": [
            {
                "Hash": "sourceviewsQUACKAGEPROJECTNAMECAPViewQUACKAGESCOPEjs",
                "Path": "source/views/QUACKAGEPROJECTNAMECAP-View-QUACKAGESCOPE.js",
                "Content": "const libPictView = require('pict-view');\n\nconst _DEFAULT_CONFIGURATION_{~PascalCaseIdentifier:Record.Quackage.AppData.Package.name~}_{~PascalCaseIdentifier:Record.Scope~} = (\n\t{\n\t\tViewIdentifier: '{~PascalCaseIdentifier:Record.Quackage.AppData.Package.name~}{~PascalCaseIdentifier:Record.Scope~}',\n\n\t\tDefaultRenderable: '{~PascalCaseIdentifier:Record.Quackage.AppData.Package.name~}-{~PascalCaseIdentifier:Record.Scope~}',\n\t\tDefaultDestinationAddress: '#{~PascalCaseIdentifier:Record.Quackage.AppData.Package.name~}_{~PascalCaseIdentifier:Record.Scope~}_Container',\n\t\tDefaultTemplateRecordAddress: false,\n\n\t\t// If this is set to true, when the App initializes this will.\n\t\t// While the App initializes, initialize will be called.\n\t\tAutoInitialize: true,\n\t\tAutoInitializeOrdinal: 0,\n\n\t\t// If this is set to true, when the App autorenders (on load) this will.\n\t\t// After the App initializes, render will be called.\n\t\tAutoRender: true,\n\t\tAutoRenderOrdinal: 0,\n\n\t\tAutoSolveWithApp: true,\n\t\tAutoSolveOrdinal: 0,\n\n\t\tCSS: false,\n\t\tCSSPriority: 500,\n\n\t\tTemplates:\n\t\t[\n\t\t\t{\n\t\t\t\tHash: '{~PascalCaseIdentifier:Record.Quackage.AppData.Package.name~}-{~PascalCaseIdentifier:Record.Scope~}-Template',\n\t\t\t\tTemplate: /*html*/`\n\t<!-- {~PascalCaseIdentifier:Record.Quackage.AppData.Package.name~} pict view template: [{~PascalCaseIdentifier:Record.Quackage.AppData.Package.name~}-{~PascalCaseIdentifier:Record.Scope~}-Template] -->\n\t<!-- {~PascalCaseIdentifier:Record.Quackage.AppData.Package.name~} end view template:  [{~PascalCaseIdentifier:Record.Quackage.AppData.Package.name~}-{~PascalCaseIdentifier:Record.Scope~}-Template] -->\n\t`\n\t\t\t}\n\t\t],\n\n\t\tRenderables:\n\t\t[\n\t\t\t{\n\t\t\t\tRenderableHash: '{~PascalCaseIdentifier:Record.Quackage.AppData.Package.name~}-{~PascalCaseIdentifier:Record.Scope~}',\n\t\t\t\tTemplateHash: '{~PascalCaseIdentifier:Record.Quackage.AppData.Package.name~}-{~PascalCaseIdentifier:Record.Scope~}-Template',\n\t\t\t\tDestinationAddress: '#{~PascalCaseIdentifier:Record.Quackage.AppData.Package.name~}_{~PascalCaseIdentifier:Record.Scope~}_Container',\n\t\t\t\tRenderMethod: 'replace'\n\t\t\t}\n\t\t],\n\n\t\tManifests: {}\n\t});\n\nclass {~PascalCaseIdentifier:Record.Quackage.AppData.Package.name~}{~PascalCaseIdentifier:Record.Scope~} extends libPictView\n{\n\tconstructor(pFable, pOptions, pServiceHash)\n\t{\n\t\tlet tmpOptions = Object.assign({}, _DEFAULT_CONFIGURATION_{~PascalCaseIdentifier:Record.Quackage.AppData.Package.name~}_{~PascalCaseIdentifier:Record.Scope~}, pOptions);\n\t\tsuper(pFable, tmpOptions, pServiceHash);\n\t}\n}\n\nmodule.exports = {~PascalCaseIdentifier:Record.Quackage.AppData.Package.name~}{~PascalCaseIdentifier:Record.Scope~};\n\n/*\n\t# Quackage Boilerplate Usage:\n\n\tTo add this view to the app, add the following code:\n\n\t// Require the {~PascalCaseIdentifier:Record.Scope~} view class prototype\n\tconst lib{~PascalCaseIdentifier:Record.Quackage.AppData.Package.name~}{~PascalCaseIdentifier:Record.Scope~}View = require(`${__dirname}/views/{~PascalCaseIdentifier:Record.Quackage.AppData.Package.name~}-View-{~PascalCaseIdentifier:Record.Scope~}.js`);\n\n\t// Add the {~PascalCaseIdentifier:Record.Scope~} view to the pict application\n\tthis.pict.addView('{~PascalCaseIdentifier:Record.Quackage.AppData.Package.name~}{~PascalCaseIdentifier:Record.Scope~}', {}, lib{~PascalCaseIdentifier:Record.Quackage.AppData.Package.name~}{~PascalCaseIdentifier:Record.Scope~}View);\n\n\t// Profit!\n*/\n\n/**************************************\n * {~PascalCaseIdentifier:Record.Quackage.AppData.Package.name~}{~PascalCaseIdentifier:Record.Scope~} Default View Configuration\n **************************************/\nmodule.exports.default_configuration = _DEFAULT_CONFIGURATION_{~PascalCaseIdentifier:Record.Quackage.AppData.Package.name~}_{~PascalCaseIdentifier:Record.Scope~};"
            }
        ]
    },
    "cliutility": {
        "Hash": "cliutility",
        "Name": "Cliutility",
        "Description": "A template set for cliutility ...",
        "Files": [
            {
                "Hash": "gitignore",
                "Path": ".gitignore",
                "Content": "package-lock.json\n\n# Test Environment\ndebug/testenv\n\n# Quackage takes care of these for me!\n.babelrc\n.browserslistrc\n.browserslistrc-BACKUP\n.gulpfile-quackage.js\n.gulpfile-quackage-config.json\n\n# I just dislike this one.\n.DS_Store\n\n# Logs\nlogs\n*.log\nnpm-debug.log*\nyarn-debug.log*\nyarn-error.log*\nlerna-debug.log*\n.pnpm-debug.log*\n\n# Diagnostic reports (https://nodejs.org/api/report.html)\nreport.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json\n\n# Runtime data\npids\n*.pid\n*.seed\n*.pid.lock\n\n# Directory for instrumented libs generated by jscoverage/JSCover\nlib-cov\n\n# Coverage directory used by tools like istanbul\ncoverage\n*.lcov\n\n# nyc test coverage\n.nyc_output\n\n# Grunt intermediate storage (https://gruntjs.com/creating-plugins#storing-task-files)\n.grunt\n\n# Bower dependency directory (https://bower.io/)\nbower_components\n\n# node-waf configuration\n.lock-wscript\n\n# Compiled binary addons (https://nodejs.org/api/addons.html)\nbuild/Release\n\n# Dependency directories\nnode_modules/\njspm_packages/\n\n# Snowpack dependency directory (https://snowpack.dev/)\nweb_modules/\n\n# TypeScript cache\n*.tsbuildinfo\n\n# Optional npm cache directory\n.npm\n\n# Optional eslint cache\n.eslintcache\n\n# Optional stylelint cache\n.stylelintcache\n\n# Microbundle cache\n.rpt2_cache/\n.rts2_cache_cjs/\n.rts2_cache_es/\n.rts2_cache_umd/\n\n# Optional REPL history\n.node_repl_history\n\n# Output of 'npm pack'\n*.tgz\n\n# Yarn Integrity file\n.yarn-integrity\n\n# dotenv environment variable files\n.env\n.env.development.local\n.env.test.local\n.env.production.local\n.env.local\n\n# parcel-bundler cache (https://parceljs.org/)\n.cache\n.parcel-cache\n\n# Next.js build output\n.next\nout\n\n# Nuxt.js build / generate output\n.nuxt\ndist\n\n# Gatsby files\n.cache/\n# Comment in the public line in if your project uses Gatsby and not Next.js\n# https://nextjs.org/blog/next-9-1#public-directory-support\n# public\n\n# vuepress build output\n.vuepress/dist\n\n# vuepress v2.x temp and cache directory\n.temp\n.cache\n\n# Docusaurus cache and generated files\n.docusaurus\n\n# Serverless directories\n.serverless/\n\n# FuseBox cache\n.fusebox/\n\n# DynamoDB Local files\n.dynamodb/\n\n# TernJS port file\n.tern-port\n\n# Stores VSCode versions used for testing VSCode extensions\n.vscode-test\n\n# yarn v2\n.yarn/cache\n.yarn/unplugged\n.yarn/build-state.yml\n.yarn/install-state.gz\n.pnp.*\n"
            },
            {
                "Hash": "vscodelaunchjson",
                "Path": ".vscode/launch.json",
                "Content": "{\n\t// Use IntelliSense to learn about possible attributes.\n\t// Hover to view descriptions of existing attributes.\n\t// For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387\n\t\"version\": \"0.2.0\",\n\t\"configurations\": [\n\n\t\t{\n\t\t\t\"type\": \"node\",\n\t\t\t\"request\": \"launch\",\n\t\t\t\"name\": \"Launch Program\",\n\t\t\t\"cwd\": \"${workspaceFolder}/debug/\",\n\t\t\t\"skipFiles\": [\n\t\t\t\t\"<node_internals>/**\"\n\t\t\t],\n\t\t\t\"program\": \"${workspaceFolder}/debug/Harness.js\"\n\t\t}\n\t]\n}"
            },
            {
                "Hash": "READMEmd",
                "Path": "README.md",
                "Content": "# No-op Command-line Command\n\nLeverages the `pict-service-commandlineutility` which wraps the `commander`\nnpm module and adds simple configuration-driven management of the application.\n\n## Application Customization\n\n### Executing the Application [`package.json`]\n\nYou can change the globally-installed program name and the npx program name\nby altering the `package.json` `bin` section:\n\n```json\n...\n    \"bin\": {\n        \"run_my_program\": \"./source/CLI-Run.js\"\n    },\n...\n```\n\nThis configuration above means that if you are in a repository with this\npackage installed, you can execute `npx run_my_program` to execute the\ncommand-line utility from any subfolder.  This works great for monorepos\nand other situations where you need scoped utilities.\n\nIf you want to for some reason execute this directly, you have to do the\ndouble dash trick:\n\n```shell\nnode ./source/CLI-Run.js -- command_to_execute -p \"parameter\"\n```\n\nIf you don't put the double dashes before the command and parameters, things\n*sometimes* work but it's extremely erratic.  Using `npx` is much cleaner as\nparameters aren't eaten by the shell/interpreter.\n\n\n"
            },
            {
                "Hash": "debuggitignore",
                "Path": "debug/.gitignore",
                "Content": "data\n"
            },
            {
                "Hash": "debugHarnessjs",
                "Path": "debug/Harness.js",
                "Content": "#!/usr/bin/env node\n\n// This loads the service directly rather than exercising the wrapping \"run\" script, which is what is executed from the CLI\nlet libCLIService = require('../source/CLI-Program.js');\n\nlibCLIService.run(['node', 'Harness.js', 'do', \"Some_file_name.txt\" /* you can add comma separated arugments here */]);\n"
            },
            {
                "Hash": "packagejson",
                "Path": "package.json",
                "Content": "{\n    \"name\": \"test\",\n    \"version\": \"1.0.0\",\n    \"description\": \"\",\n    \"main\": \"source/CLI-Service.js\",\n    \"bin\": {\n        \"run_my_program\": \"./source/CLI-Run.js\"\n    },\n    \"scripts\": {\n        \"start\": \"node source/CLI-Service.js\",\n        \"test\": \"npx mocha -u tdd -R spec\",\n        \"tests\": \"npx mocha -u tdd --exit -R spec --grep\",\n        \"coverage\": \"npx nyc --reporter=lcov --reporter=text-lcov npx mocha -- -u tdd -R spec\",\n        \"build\": \"npx quack build\"\n    },\n    \"author\": \"\",\n    \"license\": \"ISC\",\n    \"dependencies\": {\n        \"pict-service-commandlineutility\": \"^1.0.15\"\n    },\n    \"devDependencies\": {\n        \"quackage\": \"^1.0.36\"\n    },\n    \"mocha\": {\n        \"diff\": true,\n        \"extension\": [\n            \"js\"\n        ],\n        \"package\": \"./package.json\",\n        \"reporter\": \"spec\",\n        \"slow\": \"75\",\n        \"timeout\": \"5000\",\n        \"ui\": \"tdd\",\n        \"watch-files\": [\n            \"source/**/*.js\",\n            \"test/**/*.js\"\n        ],\n        \"watch-ignore\": [\n            \"lib/vendor\"\n        ]\n    }\n}"
            },
            {
                "Hash": "sourceCLICommandSomeCommandjs",
                "Path": "source/CLI-Command-SomeCommand.js",
                "Content": "const libCLICommandLineCommand = require('pict-service-commandlineutility').ServiceCommandLineCommand;\n\nclass PushComprehensionsViaIntegration extends libCLICommandLineCommand\n{\n\tconstructor(pFable, pOptions, pServiceHash)\n\t{\n\t\tsuper(pFable, pOptions, pServiceHash);\n\n\t\t// This is the command keyword that will be used to execute this command.\n\t\t//\n\t\t// For this example command, you would run `npx run_my_program do_something`\n\t\tthis.options.CommandKeyword = 'do_something';\n\t\tthis.options.Description = 'Describe here what your command does.';\n\n\t\t// This is a shorthand alias for the command.  Make as many as you want!\n\t\tthis.options.Aliases.push('do');\n\n\t\t// This is a command Argument -- a required string after the command.\n\t\t//\n\t\t// So for instance if you needed an input filename for this command to\n\t\t// function properly, you could call it `input_file_name_` here and\n\t\t// within the command below, it will be in `this.ArgumentString`.\n\t\tthis.options.CommandArguments.push({ Name: '<input_file_name>', Description: 'The file to load.' });\n\n\t\t// Add the command to the program.  This makes it executable by the\n\t\t// wrapping program.\n\t\tthis.addCommand();\n\t}\n\n\t/**\n\t * Execute whatever is in the command.\n\t * \n\t * This function is not strictly necessary but is an easier pattern to\n\t * maintain because we can run this from a test harness without using\n\t * any of the `commander.js` comand-line-utility library stuff.\n\t * \n\t * You can call this anything you want (or delete it).\n\t * \n\t * @param {function} fCallback\n\t * \n\t * @returns void\n\t */\n\tdoSomethingAsyncronous(fCallback)\n\t{\n\t\tlet tmpInputFile = this.ArgumentString;\n\n\t\tlet tmpAnticipate = this.fable.newAnticipate();\n\n\t\ttmpAnticipate.anticipate(\n\t\t\t(fCallback) =>\n\t\t\t{\n\t\t\t\tthis.fable.log.info(`Preparing the command to run...`);\n\t\t\t\treturn fCallback();\n\t\t\t});\n\n\t\ttmpAnticipate.anticipate(\n\t\t\t(fCallback) =>\n\t\t\t{\n\t\t\t\ttry\n\t\t\t\t{\n\t\t\t\t\tthis.fable.log.info(`...running the command on the input file [${this.ArgumentString}]...`);\n\t\t\t\t\t// Put some kind of code here to do something.\n\t\t\t\t\treturn fCallback();\n\t\t\t\t}\n\t\t\t\tcatch(pError)\n\t\t\t\t{\n\t\t\t\t\tthis.fable.log.error(`Error running the command: ${pError}`, pError);\n\t\t\t\t\treturn fCallback(pError);\n\t\t\t\t}\n\t\t\t});\n\n\t\ttmpAnticipate.anticipate(\n\t\t\t(fCallback) =>\n\t\t\t{\n\t\t\t\tthis.fable.log.info(`...cleaning up after the command...`);\n\t\t\t\t// We should always clean up after ourselves\n\t\t\t\treturn fCallback();\n\t\t\t});\n\n\t\ttmpAnticipate.wait(\n\t\t\t(pError) =>\n\t\t\t{\n\t\t\t\tif (pError)\n\t\t\t\t{\n\t\t\t\t\tthis.fable.log.error(`Execution error running the command: ${pError}`, pError);\n\t\t\t\t\treturn fCallback(pError);\n\t\t\t\t}\n\t\t\t\tthis.fable.log.info(`...fiinished running the command.`);\n\t\t\t\tthis.fable.log.info(`Have a nice day!`);\n\t\t\t\treturn fCallback(pError);\n\t\t\t});\n\t}\n\n\t/**\n\t * The overloaded command function from the `pict-service-commandlineutility` class.\n\t * \n\t * @param {function} fCallback \n\t * @returns void\n\t */\n\tonRunAsync(fCallback)\n\t{\n\t\treturn this.doSomethingAsyncronous(fCallback);\n\t}\n}\n\nmodule.exports = PushComprehensionsViaIntegration;\n"
            },
            {
                "Hash": "sourceCLIProgramjs",
                "Path": "source/CLI-Program.js",
                "Content": "const libCLIProgram = require('pict-service-commandlineutility');\nconst _PackageJSON = require('../package.json');\n\n/**\n * This object is the `pict` and `fable` settings for the program.\n * \n * The object is exposed in commands as the `this.fable.settings` object.\n */\nconst _ProgramPictSettings = (\n\t{\n\t\tProduct: 'NoOp-CLI',\n\t\tDescription: 'Do absolutely nothing.',\n\n\t\t// This is the command that will be used to run the program from the command line.\n\t\t// Not necessary but nice to have inside the different commands.\n\t\tCommand: 'run_my_program',\n\t\tVersion: _PackageJSON.version,\n\n\t\t// This is the `fable-log` logstreams configuration.\n\t\tLogStreams:\n\t\t\t[\n\t\t\t\t/* You can uncomment this to have a log file output. */\n\t\t\t\t{\n\t\t\t\t\tloggertype:'simpleflatfile',\n\t\t\t\t\toutputloglinestoconsole: false,\n\t\t\t\t\tshowtimestamps: true,\n\t\t\t\t\tformattedtimestamps: true,\n\t\t\t\t\tlevel:'trace',\n\t\t\t\t\tpath: `${process.cwd()}/NoOp-CLI-Run-${libCLIProgram.generateFileNameDateStamp()}.log`\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tloggertype:'console',\n\t\t\t\t\tshowtimestamps: true,\n\t\t\t\t\tformattedtimestamps: true,\n\t\t\t\t\tlevel: 'trace'\n\t\t\t\t}\n\t\t\t],\n\n\t\t// This is the filename for the program options file.\n\t\t// \n\t\t// Options files are read from:\n\t\t// 1. The current directory.\n\t\t// 2. The user's home directory.\n\t\t// 3. This configuration (DefaultProgramOptions)\n\t\t//\n\t\t// These options files are wonderful for managing credentials when you\n\t\t// don't want to hard-code them into your program and want multiple\n\t\t// tools to share the same configuration.\n\t\t//\n\t\t// The file is a JSON file.\n\t\t//\n\t\t// These options are exposed in commands as the `this.options` object.\n\t\tProgramOptionsFileName: '.myprogram.config.json',\n\n\t\t// This tells the utility to automatically try to coalesce the Options\n\t\t// files in the order above.\n\t\tAutoGatherProgramOptions: true,\n\t\t// This adds an explanation command so users can see what the Options\n\t\t// coalesced to.\n\t\tAutoAddConfigurationExplanationCommand: true,\n\n\t\t// These are the default options listed as fallback 3 above\n\t\tDefaultProgramOptions:\n\t\t\t{\n\t\t\t\tSome_Configuration_Value: \"ALWAYS\"\n\t\t\t},\n\n\t\t// This is exposed for convenience to the developer.\n\t\tPackageJSON: _PackageJSON\n\t});\n\n// Instantiate an instance of the pict CLI program.  Includes commander, pict\n// and fable ready to go.\nlet _Program = new libCLIProgram(_ProgramPictSettings,\n// This is an array of pict CLICommandLineCommands.\n// Class: require('pict-service-commandlineutility').ServiceCommandLineCommand\n\t[\n\t\trequire('./CLI-Command-SomeCommand.js')\n\t]);\n\nmodule.exports = _Program;"
            },
            {
                "Hash": "sourceCLIRunjs",
                "Path": "source/CLI-Run.js",
                "Content": "#!/usr/bin/env node\n\nlet libCLIProgram = require('./CLI-Program.js');\n\nlibCLIProgram.run();"
            }
        ]
    },
    "fableservice": {
        "Hash": "fableservice",
        "Name": "Fableservice",
        "Description": "A template set for fableservice ...",
        "Files": [
            {
                "Hash": "FableServicejs",
                "Path": "Fable-Service.js",
                "Content": "const FableServiceProviderBase = require('fable-serviceproviderbase');\n\nconst _DefaultOptions = (\n\t{\n\t});\n\nclass FableService extends FableServiceProviderBase\n{\n\t/**\n\t * @param {import('fable')} pFable - The fable instance.\n\t * @param {Object<String, any>} [pOptions] - The options for the client.\n\t * @param {String} [pServiceHash] - A service hash for the fable service.\n\t */\n\tconstructor(pFable, pOptions, pServiceHash)\n\t{\n\t\tlet tmpOptions = Object.assign({}, _DefaultOptions, pOptions);\n\t\tsuper(pFable, tmpOptions, pServiceHash);\n\t}\n\n\tdoSomething()\n\t{\n\t\treturn true;\n\t}\n}\n\nmodule.exports = FableService;\n\nmodule.exports.default_configuration = _DefaultOptions;\n"
            }
        ]
    },
    "pictwebapp": {
        "Hash": "pictwebapp",
        "Name": "Pictwebapp",
        "Description": "A template set for pictwebapp ...",
        "Files": [
            {
                "Hash": "packagejson",
                "Path": "package.json",
                "Content": "{\n  \"name\": \"pictwebapp\",\n  \"version\": \"1.0.0\",\n  \"main\": \"source/Pict-Web-Application.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"author\": \"\",\n  \"license\": \"MIT\",\n  \"description\": \"\"\n}\n"
            }
        ]
    }
}